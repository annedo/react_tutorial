{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","data-row","rowIndex","data-col","colIndex","value","BoardRow","squares","Board","squaresArray","board","row","length","push","this","renderRow","rowArray","squareElements","square","renderSquare","key","onClick","renderBoard","React","Component","Game","_this","Object","D_wamp64_www_react_tutorial_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","D_wamp64_www_react_tutorial_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_wamp64_www_react_tutorial_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","history","Array","fill","map","lastMove","stepNumber","xIsNext","clickedSquare","innerText","parseInt","getAttribute","slice","currentArr","currSquares","i","console","log","calculateWinner","setState","concat","step","status","_this2","current","winner","moves","move","desc","style","fontWeight","jumpTo","event","handleClick","target","isWinnerLine","element","index","array","allLines","col","lineArr","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16cdfc3a.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n      <button className=\"square\" \r\n              data-row={props.rowIndex} \r\n              data-col={props.colIndex}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n}\r\n\r\nfunction BoardRow(props) {\r\n  return <div className=\"board-row\">{props.squares}</div>\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderBoard(squaresArray) {\r\n    let board = [];\r\n    for (let row=0; row<squaresArray.length; row++) {\r\n      board.push(this.renderRow(row));\r\n    }\r\n    return board;\r\n  }\r\n\r\n  renderRow(rowIndex) {\r\n    const rowArray = this.props.squares[rowIndex];\r\n    let squareElements = [];\r\n\r\n    for (let colIndex=0; colIndex<rowArray.length; colIndex++) {\r\n      let square = this.renderSquare(rowIndex, colIndex);\r\n      squareElements.push(square);\r\n    }\r\n\r\n    return (\r\n      <BoardRow squares={squareElements} key={\"row\" + rowIndex}/>\r\n    );\r\n  }\r\n\r\n  renderSquare(rowIndex, colIndex) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[rowIndex][colIndex]} \r\n        key= {colIndex + \", \" + rowIndex}\r\n        rowIndex={rowIndex}\r\n        colIndex={colIndex}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game-board\" onClick= {this.props.onClick}>\r\n        {this.renderBoard(this.props.squares)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(3).fill(null).map(() => Array(3).fill(null)),\r\n        lastMove: null,\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    }\r\n  }\r\n\r\n  handleClick(clickedSquare) {\r\n    let square = { \"value\": clickedSquare.innerText,\r\n                   \"row\": parseInt(clickedSquare.getAttribute(\"data-row\")),\r\n                   \"col\": parseInt(clickedSquare.getAttribute(\"data-col\"))\r\n                  }\r\n    // Slicing history removes future moves after jumping back in time\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const currentArr = history[history.length - 1].squares;\r\n    let currSquares = [];\r\n\r\n    for (let i=0, row; row=currentArr[i]; i++) {\r\n      currSquares.push(row.slice());\r\n    }\r\n\r\n    console.log(currSquares);\r\n\r\n    if (calculateWinner(currSquares) || square.value) {\r\n      return;\r\n    }\r\n\r\n    // Set square value and update board state\r\n    currSquares[square.row][square.col] = this.state.xIsNext ? \"X\": \"O\";\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: currSquares,\r\n        lastMove: \"(\"+ (square.row + 1) + \",\" + (square.col + 1) +\")\",\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    const moves = history.map((step, move, history) => {\r\n      const desc = move ?\r\n        'Go to move #' + move + \" \" + step.lastMove :\r\n        'Go to game start';\r\n\r\n      return (\r\n        <li key={move}>\r\n          <button style={move===this.state.stepNumber ? {\"fontWeight\": \"bold\",} : {\"fontWeight\": \"normal\",}} \r\n                  onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <Board squares={current.squares} onClick={(event) => this.handleClick(event.target)}/>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  function isWinnerLine(element, index, array) {\r\n    return (element != null && element === array[0]);\r\n  }\r\n  // All winning combinations\r\n  // 3 straight row, 3 straight col, 2 diagonal\r\n  let ldiag = [squares[0][0], squares[1][1], squares[2][2]];\r\n  let rdiag = [squares[0][2], squares[1][1], squares[2][0]];\r\n  let allLines = [ldiag, rdiag];\r\n  for (let i=0; i < squares.length; i++) {\r\n    let row = squares[i];\r\n    let col = [squares[0][i], squares[1][i], squares[2][i]];\r\n    allLines.push(row);\r\n    allLines.push(col);\r\n  }\r\n  \r\n  for (let i=0, lineArr; lineArr = allLines[i]; i++) {\r\n    if (lineArr.every(isWinnerLine)) {\r\n      return lineArr[0];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}